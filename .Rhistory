# variaveis criadas
vars_rua <- imoveis_clean_rua %>% select(rua, anuncio_rua = total_a, valores_rua = media_p)
vars_condo <- imoveis_clean_condominio %>% select(condominio, anuncio_condo = total_a, valores_condo = media_p)
vars_agente <- imoveis_clean_agent %>% select(agent, anuncio_agente = total_a, valores_agente = media_p)
### Modelo preditivo
# df final para analise e com variaveis novas
imoveis_final <- imoveis_clean %>%
left_join(vars_rua) %>%
left_join(vars_condo) %>%
left_join(vars_agente) %>%
select(-c(Data, rua, numero, price_by_sqm, condominio, agent, agent_number, latitude, longitude, property_d, url))
## dados de teste e treino
# Carregando pacote necessario e iniciando seed do projeto
library(mlbench)
library(caret)
set.seed(666)
sample <- createDataPartition(imoveis_final$price, times = 1, list = F, p = .9)
train_sample <- imoveis_final[sample, ]
test_sample <- imoveis_final[-sample, ]
# funcao para transformar variaveis em fact
toFactor <- function(df, features) {
for (feature in features) {
df[[feature]] <- factor(df[[feature]], exclude = NULL)
}
return(df)
}
train_fact <- toFactor(train_sample, fact_vars)
summary(imoveis_modelo)
# funcao para escalar variaveis
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(train_fact, method = c("knnImpute", "center", "scale"))
# transform the dataset using the parameters
train_preProc <- predict(preprocessParams, imoveis_modelo)
# funcao para escalar variaveis
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(train_fact, method = c("knnImpute", "center", "scale"))
# transform the dataset using the parameters
train_preProc <- predict(preprocessParams, train_fact)
# run the RFE algorithm
results <- rfe(train_preProc[, -c(2)], as.matrix(train_preProc[,2]), sizes=c(1:14), rfeControl=control)
# define the control using a random forest selection function
control <- rfeControl(functions=lmFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(train_preProc[, -c(2)], as.matrix(train_preProc[,2]), sizes=c(1:14), rfeControl=control)
control <- rfeControl(functions=rfFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(train_preProc[, -c(2)], as.matrix(train_preProc[,2]), sizes=c(1:14), rfeControl=control)
control <- trainControl(method="cv",
number=10,
returnResamp = "all",
verboseIter = TRUE,
savePredictions = TRUE)
model1 <- train(price ~ .,
data = train_fact,
method = "lm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"))
x <- train_fact[-2]
t <- train_fact[2]
control <- trainControl(method="cv",
number=10,
returnResamp = "all",
verboseIter = TRUE,
savePredictions = TRUE)
model1 <- train(x = x, y = y,
method = "lm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"))
y <- train_fact[2]
control <- trainControl(method="cv",
number=10,
returnResamp = "all",
verboseIter = TRUE,
savePredictions = TRUE)
model1 <- train(x = x, y = y,
method = "lm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"))
model1 <- train(x = x, y = as.matrix(y),
method = "lm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"))
model1 <- train(x = x, y = as.matrix(y),
method = "glm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"))
control <- trainControl(method="cv",
number=10
)
model1 <- train(x = x, y = as.matrix(y),
method = "lm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"))
y
library(mlbench)
library(caret)
set.seed(666)
sample <- createDataPartition(imoveis_final$price, times = 1, list = F, p = .8)
train_sample <- imoveis_final[sample, ]
test_sample <- imoveis_final[-sample, ]
# funcao para transformar variaveis em fact
toFactor <- function(df, features) {
for (feature in features) {
df[[feature]] <- factor(df[[feature]], exclude = NULL)
}
return(df)
}
train_fact <- toFactor(train_sample, fact_vars)
x <- train_fact[-2]
y <- train_fact[2]
summary(imoveis_modelo)
control <- trainControl(method="cv", number=10)
model1 <- train(price ~ .,
data = train_fact,
method = "lm",
trControl = control,
preProcess = c("medianImpute", "center", "scale"),
metric = 'Rsquared')
summary(train_fact)
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(train_fact, method=c("medianImpute", "center", "scale"))
# transform the dataset using the parameters
transformed <- predict(preprocessParams, train_fact)
control <- trainControl(method="cv", number=10)
model1 <- train(price ~ .,
data = transformed,
method = "lm",
trControl = control,
metric = 'Rsquared')
varImp(model1, scale=FALSE)
plot(varImp(model1, scale=FALSE))
control <- trainControl(method="cv", number=10)
model1 <- train(price ~ .,
data = transformed,
method = "lm",
trControl = control,
metric = 'RMSE')
plot(varImp(model1, scale=FALSE))
control1 <- rfeControl(functions=lmFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(price ~ ., data = transformed, sizes=c(1:10), rfeControl=control1)
# summarize the results
plot(varImp(results, scale=FALSE))
results
# summarize the results
varImp(results, scale=FALSE)
plot(results, type=c("g", "o"))
# summarize the results
plot(varImp(results, scale=FALSE))
# summarize the results
varImp(results, scale=FALSE)
View(imoveis_clean_rua)
View(imoveis_final)
imoveis_final <- imoveis_clean %>%
left_join(vars_rua) %>%
left_join(vars_condo) %>%
left_join(vars_agente) %>%
select(-c(Data, rua, numero, bairro, price_by_sqm, condominio, agent, agent_number, latitude, longitude, property_d, url))
## dados de teste e treino
# Carregando pacote necessario e iniciando seed do projeto
library(mlbench)
library(caret)
set.seed(666)
sample <- createDataPartition(imoveis_final$price, times = 1, list = F, p = .8)
train_sample <- imoveis_final[sample, ]
test_sample <- imoveis_final[-sample, ]
# funcao para transformar variaveis em fact
toFactor <- function(df, features) {
for (feature in features) {
df[[feature]] <- factor(df[[feature]], exclude = NULL)
}
return(df)
}
train_fact <- toFactor(train_sample, fact_vars)
test_fact
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(train_fact, method=c("medianImpute", "center", "scale"))
# transform the dataset using the parameters
transformed <- predict(preprocessParams, train_fact)
x <- train_fact[-2]
y <- train_fact[2]
summary(imoveis_modelo)
control <- trainControl(method="cv", number=10)
model1 <- train(price ~ .,
data = transformed,
method = "lm",
trControl = control,
metric = 'RMSE')
plot(varImp(model1, scale=FALSE))
control1 <- rfeControl(functions=lmFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(price ~ ., data = transformed, sizes=c(1:10), rfeControl=control1)
# summarize the results
varImp(results, scale=FALSE)
plot(results, type=c("g", "o"))
View(x)
View(imoveis_final)
summary(imoveis_modelo)
# transform the dataset using the parameters
imoveis_preproc <- predict(preprocessParams, train_fact)
preprocessParams <- preProcess(train_fact, method=c("knnImpute", "center", "scale"))
# transform the dataset using the parameters
imoveis_preproc <- predict(preprocessParams, train_fact)
summary(imoveis_preproc)
control <- trainControl(method="cv", number=10)
model1 <- train(price ~ .,
data = imoveis_preproc,
method = "lm",
trControl = control,
metric = 'RMSE')
plot(varImp(model1, scale=FALSE))
control1 <- rfeControl(functions=lmFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(price ~ ., data = imoveis_preproc, sizes=c(1:15), rfeControl=control1)
# summarize the results
varImp(results, scale=FALSE)
plot(results, type=c("g", "o"))
test_fact <- toFactor(test_sample, fact_vars)
test_fact <- toFactor(test_sample, fact_vars)
test_sample <- imoveis_final[-sample, ]
test_fact <- toFactor(test_sample, fact_vars)
View(test_sample)
cont_vars <- c('area', 'iptu','condominium_fee')
plots_cont <- list()
for (var in cont_vars) {
plots_cont[[i]] <- ggplot(imoveis_clean, aes_string(log(imoveis_clean[[var]]), log(imoveis_clean[['price']]))) +
geom_point() +
geom_smooth(method = lm, se = F) +
ggtitle(paste(var, 'x price')) +
theme_minimal()
print(plots_cont[[i]])
}
# visualizacao das variaveis factor
fact_vars <- c('bairro', 'rooms', 'bathrooms','garage')
plots_fact <- list()
for (var in fact_vars) {
plots_fact[[i]] <- ggplot(imoveis_clean, aes_string(x = as.factor(imoveis_clean[[var]]), log(imoveis_clean[['price']]))) +
geom_point() +
geom_boxplot() +
ggtitle(paste(var, 'x price')) +
theme_minimal()
print(plots_fact[[i]])
}
knitr::opts_chunk$set(echo = TRUE)
## Investigacao outliers
View(imoveis_clean %>% filter(property_d %in% c(53512644, 83712188, 80671730)))
plot(varImp(model1, scale=FALSE))
print(model1)
model2 <- train(price ~ garage+condominium_fee+rooms+anuncio_condo+area,
data = imoveis_preproc,
method = "lm",
trControl = control,
metric = 'RMSE')
print(model2)
pred <- predict(model1, test_fact)
test_fact <- toFactor(test_sample, fact_vars)
test_sample <- imoveis_final[-sample, ]
View(test_sample)
test_fact <- toFactor(test_sample, fact_vars)
train_fact <- toFactor(train_sample, fact_vars)
fact_vars_final <- c('rooms', 'bathrooms','garage')
train_fact <- toFactor(train_sample, fact_vars_final)
test_fact <- toFactor(test_sample, fact_vars_final)
# calculate the pre-process parameters from the dataset
preprocessParams <- preProcess(train_fact, method=c("knnImpute", "center", "scale"))
# transform the dataset using the parameters
imoveis_preproc <- predict(preprocessParams, train_fact)
control <- trainControl(method="cv", number=10)
model1 <- train(price ~ .,
data = imoveis_preproc,
method = "lm",
trControl = control,
metric = 'RMSE')
plot(varImp(model1, scale=FALSE))
control_rfe <- rfeControl(functions=lmFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(price ~ ., data = imoveis_preproc, sizes=c(1:15), rfeControl=control_rfe)
plot(results, type=c("g", "o"))
pred <- predict(model1, test_fact)
defaultSummary(test_fact[[1]], pred)
defaultSummary(test_fact[1], pred)
pred <- predict(model1, test_fact)
defaultSummary(test_fact[1], pred)
defaultSummary(data.frame(teste = test_fact[1], pred = pred))
dim(pred)
dim(pred)
test_fact <- toFactor(test_sample, fact_vars_final)
pred <- predict(model1, test_fact)
dim(pred)
length(pred)
preprocessParams_train <- preProcess(test_fact, method=c("knnImpute", "center", "scale"))
preprocessParams_test <- preProcess(test_fact, method=c("knnImpute", "center", "scale"))
test_preproc <- predict(preprocessParams_test, test_fact)
pred <- predict(model1, test_preproc)
defaultSummary(data.frame(teste = test_preproc[1], pred = pred))
defaultSummary(data.frame(teste = test_preproc[[1]], pred = pred))
defaultSummary(data.frame(test_preproc[[1]], pred))
rmse <- data.frame(teste = test_preproc[[1]], pred = pred)
View(rmse)
defaultSummary(rmse)
defaultSummary(rmse, teste, pred)
defaultSummary(rmse, teste, pred)
modelvalues<-data.frame(obs = test_preproc$price, pred= pred)
defaultSummary(modelvalues)
# score modelo
pred <- predict(model1, test_preproc)
modelvalues<-data.frame(obs = test_preproc$price, pred= pred)
defaultSummary(modelvalues)
knitr::opts_chunk$set(echo = TRUE, cache = TRUE)
# Carrehando pacote necessario
library(dplyr)
# Obtencao dos dados
imoveis <- as.tbl(read.csv2('Crawler_vivareal_venda_2017_desafio.csv', stringsAsFactors = F, encoding = "UTF-8",
na.strings = ""))
glimpse(imoveis)
### Data celaning
imoveis_clean = imoveis
# Pacotes necessários
library(stringr)
library(lubridate)
# data
names(imoveis_clean) <- str_replace(names(imoveis_clean), 'X.U.FEFF.date', 'Data')
imoveis_clean$Data <- as.Date(imoveis$X.U.FEFF.date, format = '%d/%m/%Y')
year(imoveis_clean$Data) <- year(imoveis_clean$Data)+2000
# lat e long
imoveis_clean$longitude <- gsub(".", "", imoveis$longitude, fixed = TRUE) %>%
sub("(\\d{2})", "\\1\\.", .) %>%
as.numeric()
imoveis_clean$latitude <- gsub(".", "", imoveis$latitude, fixed = TRUE) %>%
sub("(\\d{2})", "\\1\\.", .) %>%
as.numeric()
# price_by_sqm
imoveis_clean$price_by_sqm <- as.numeric(imoveis_clean$price_by_sqm)
# condominium_fee e iptu
imoveis_clean$condominium_fee <- str_replace_all(imoveis$condominium_fee, 'R\\$', '') %>%
str_replace_all('[:punct:]', '') %>%
as.numeric()
imoveis_clean$iptu <- str_replace_all(imoveis$iptu, 'R\\$', '') %>%
str_replace_all('[:punct:]', '') %>%
as.numeric()
# visualizacao do novo df
glimpse(imoveis_clean)
## Visualizacao interativa
library(leaflet)
leaflet(data = imoveis_clean) %>% addTiles() %>%
addMarkers(~longitude, ~latitude, popup = ~as.character(property_d),
clusterOptions = markerClusterOptions()
)
# visualizacao das variaveis continuas
library(ggplot2)
cont_vars <- c('area', 'iptu','condominium_fee')
plots_cont <- list()
for (var in cont_vars) {
plots_cont[[var]] <- ggplot(imoveis_clean, aes_string(log(imoveis_clean[[var]]), log(imoveis_clean[['price']]))) +
geom_point() +
geom_smooth(method = lm, se = F) +
ggtitle(paste(var, 'x price')) +
theme_minimal()
print(plots_cont[[var]])
}
# visualizacao das variaveis factor
fact_vars <- c('bairro', 'rooms', 'bathrooms','garage')
plots_fact <- list()
for (var in fact_vars) {
plots_fact[[var]] <- ggplot(imoveis_clean, aes_string(x = as.factor(imoveis_clean[[var]]), log(imoveis_clean[['price']]))) +
geom_point() +
geom_boxplot() +
ggtitle(paste(var, 'x price')) +
theme_minimal()
print(plots_fact[[var]])
}
## Investigacao outliers
imoveis_clean %>% filter(property_d %in% c(53512644, 83712188, 80671730))
imoveis_clean %>% filter(log(area) > 10 | log(price) < 10)
imoveis_clean %>% filter(bathrooms > 9)
imoveis_clean %>% filter(garage > 9)
# por estarem completamente fora do espaço geografico do resto da amostra, colocarei seus bairros como NA
imoveis_clean$bairro[which(imoveis$property_d %in% c(53512644, 83712188, 80671730))] <- NA
# o apartamento com mais de 54 banheiros parece muito fora da media em relacao ao seu preco e area
imoveis_clean$bathrooms[which(imoveis$bathrooms == 54)] <- NA
# criacao dos dfs comas supostas novas variaveis de interesse
imoveis_clean_rua <- imoveis_clean %>%
group_by(rua) %>%
summarise(total_a = n(),
media_p = mean(price_by_sqm, na.rm = T)) %>%
filter(!(is.na(rua)))
imoveis_clean_condominio <- imoveis_clean %>%
group_by(condominio) %>%
summarise(total_a = n(),
media_p = mean(price_by_sqm, na.rm = T)) %>%
filter(!(is.na(condominio)))
# como ha agencias sem nenhuma entrada, filtro antes de achar as variaves finais
imoveis_clean_agent <- imoveis_clean %>%
group_by(agent) %>%
summarise(total_a = n(),
media_p = mean(price_by_sqm, na.rm = T)) %>%
filter(!(is.na(agent))) %>%
filter(!(is.na(media_p)))
# plot total_a
var_t <- list(imoveis_clean_rua %>% arrange(desc(total_a)),
imoveis_clean_condominio %>% arrange(desc(total_a)),
imoveis_clean_agent %>% arrange(desc(total_a)))
plots_total <- list()
for (i in 1:length(var_t)){
plots_total[[i]] <- ggplot(var_t[[i]], aes(x = factor(var_t[[i]][[1]], levels = var_t[[i]][[1]]),
y = total_a)) +
geom_bar(stat="identity", width=.5) +
coord_flip() +
labs(title=paste('Anúncios x ', names(var_t[[i]])[[1]]),
x = names(names(var_t[[i]])[[1]]),
y = 'Anúncios')
print(plots_total[[i]])
}
# plot da media_p
var_m <- list(imoveis_clean_rua %>% arrange(desc(media_p)),
imoveis_clean_condominio %>% arrange(desc(media_p)),
imoveis_clean_agent %>% arrange(desc(media_p)))
plots_media <- list()
for (i in 1:length(var_m)){
plots_media[[i]] <- ggplot(var_m[[i]], aes(x = factor(var_m[[i]][[1]], levels = var_m[[i]][[1]]),
y = media_p)) +
geom_bar(stat="identity", width=.5) +
coord_flip() +
labs(title=paste('Media x ', names(var_m[[i]])[[1]]),
x = names(names(var_m[[i]])[[1]]),
y = 'Media')
print(plots_media[[i]])
}
# variaveis criadas
vars_rua <- imoveis_clean_rua %>% select(rua, anuncio_rua = total_a, valores_rua = media_p)
vars_condo <- imoveis_clean_condominio %>% select(condominio, anuncio_condo = total_a, valores_condo = media_p)
vars_agente <- imoveis_clean_agent %>% select(agent, anuncio_agente = total_a, valores_agente = media_p)
# Modelo final
imoveis_final <- imoveis_clean %>%
left_join(vars_rua) %>%
left_join(vars_condo) %>%
left_join(vars_agente) %>%
select(-c(Data, rua, numero, bairro, price_by_sqm, condominio, agent, agent_number, latitude, longitude, property_d, url))
glimpse(imoveis_final)
library(caret)
library(mlbench)
set.seed(666)
sample <- createDataPartition(imoveis_final$price, times = 1, list = F, p = .8)
train_sample <- imoveis_final[sample, ]
test_sample <- imoveis_final[-sample, ]
# funcao para transformar variaveis em fact
toFactor <- function(df, features) {
for (feature in features) {
df[[feature]] <- factor(df[[feature]], exclude = NULL)
}
return(df)
}
fact_vars_final <- c('rooms', 'bathrooms','garage')
train_fact <- toFactor(train_sample, fact_vars)
View(train_sample)
library(caret)
library(mlbench)
set.seed(666)
sample <- createDataPartition(imoveis_final$price, times = 1, list = F, p = .8)
train_sample <- imoveis_final[sample, ]
test_sample <- imoveis_final[-sample, ]
# funcao para transformar variaveis em fact
toFactor <- function(df, features) {
for (feature in features) {
df[[feature]] <- factor(df[[feature]], exclude = NULL)
}
return(df)
}
fact_vars_final <- c('rooms', 'bathrooms','garage')
train_fact <- toFactor(train_sample, fact_vars_final)
test_fact <- toFactor(test_sample, fact_vars_final)
# Pré processadores
preprocessParams_train <- preProcess(train_fact, method=c("knnImpute", "center", "scale"))
preprocessParams_test <- preProcess(test_fact, method=c("knnImpute", "center", "scale"))
# Dfs transformados
train_preproc <- predict(preprocessParams_train, train_fact)
test_preproc <- predict(preprocessParams_test, test_fact)
# Controle
control <- trainControl(method="cv", number=10)
# Modelo
model1 <- train(price ~ .,
data = train_preproc,
method = "lm",
trControl = control,
metric = 'RMSE')
plot(varImp(model1, scale=FALSE))
control_rfe <- rfeControl(functions=lmFuncs, method="cv", number=10)
# run the RFE algorithm
results <- rfe(price ~ ., data = train_preproc, sizes=c(1:15), rfeControl=control_rfe)
# summarize the results
varImp(results, scale=FALSE)
plot(results, type=c("g", "o"))
# score modelo
pred <- predict(model1, test_preproc)
modelvalues<-data.frame(obs = test_preproc$price, pred= pred)
defaultSummary(modelvalues)
library(caret)
library(mlbench)
set.seed(666)
sample <- createDataPartition(imoveis_final$price, times = 1, list = F, p = .8)
train_sample <- imoveis_final[sample, ]
test_sample <- imoveis_final[-sample, ]
# funcao para transformar variaveis em fact
toFactor <- function(df, features) {
for (feature in features) {
df[[feature]] <- factor(df[[feature]], exclude = NULL)
}
return(df)
}
fact_vars_final <- c('rooms', 'bathrooms','garage')
train_fact <- toFactor(train_sample, fact_vars_final)
test_fact <- toFactor(test_sample, fact_vars_final)
